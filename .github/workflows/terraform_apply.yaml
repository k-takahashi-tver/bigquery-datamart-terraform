# main ブランチから dev/stg/prd 各ブランチへの push をトリガーにして terraform apply コマンドを実行する

name: terraform apply
run-name: Pusher ${{ github.actor }}, Workflow ${{ github.workflow }}
on: 
  push:
    branches:
      - devintegrate
      - staging
      - production
  workflow_dispatch: # 手動実行用トリガー

jobs:
  terraform-apply: 
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    permissions:
      id-token: write
      pull-requests: write
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"
      
      # devintegrate
      # サービスアカウントのキーを secrets 変数に登録している
      - name: Authenticate with gcloud dev
        if: ${{ github.ref == 'refs/heads/devintegrate' }}
        uses: google-github-actions/auth@v2
        with:
          project_id: tver-dev
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_DEV }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_EMAIL_DEV }}
      
      # サービスアカウントの権限を借用して実行
      - name: devintegrate Terraform init & Terraform apply
        if: ${{ github.ref == 'refs/heads/devintegrate' }}
        run: |
          terraform init -backend-config="./environments/devintegrate/dev.tfbackend"
          terraform apply -var-file ./environments/devintegrate/terraform.tfvars -no-color -auto-approve | tee apply_output.txt

      # staging
      - name: Authenticate with gcloud stg
        if: ${{ github.ref == 'refs/heads/staging' }}
        uses: google-github-actions/auth@v2
        with:
          project_id: tver-stg
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_STG }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_EMAIL_STG }}
      
      - name: staging Terraform init & Terraform apply
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: |
          terraform init -backend-config="./environments/staging/stg.tfbackend"
          terraform apply -var-file ./environments/staging/terraform.tfvars -no-color -auto-approve | tee apply_output.txt

      # production
      - name: Authenticate with gcloud prd
        if: ${{ github.ref == 'refs/heads/production' }}
        uses: google-github-actions/auth@v2
        with:
          project_id: tver-infla
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_PRD }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_EMAIL_PRD }}

      - name: production Terraform init & Terraform apply
        if: ${{ github.ref == 'refs/heads/production' }}
        run: |
          terraform init -backend-config="./environments/production/prd.tfbackend"
          terraform apply -var-file ./environments/production/terraform.tfvars -no-color -auto-approve | tee apply_output.txt
     
      # プルリクに投稿する
      - uses: actions/github-script@v7
        if: ${{ github.ref == 'refs/heads/devintegrate' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `詳細は <a target=_blank href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">こちら</a>`;

            const { data } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });
            const pr_number = data?.[0]?.number;
            if (pr_number) {
              github.rest.issues.createComment({
                issue_number: pr_number, 
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
